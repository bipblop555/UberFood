// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UberFood.Core.Context;

#nullable disable

namespace UberFood.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UberFood.Core.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Country");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("State");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Street");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Zip");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("UberFood.Core.Entities.Dough", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Doughs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classique"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Épaisse"
                        });
                });

            modelBuilder.Entity("UberFood.Core.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("AdressId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryAdressId");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeliveryTime");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("UberFood.Core.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("UberFood.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Price");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("UberFood.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int")
                        .HasColumnName("AdresseId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Mail");

                    b.Property<int>("Phone")
                        .HasMaxLength(150)
                        .HasColumnType("int")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UberFood.Core.Entities.Drink", b =>
                {
                    b.HasBaseType("UberFood.Core.Entities.Product");

                    b.Property<bool>("Fizzy")
                        .HasColumnType("bit")
                        .HasColumnName("Fizzy");

                    b.Property<double>("KCal")
                        .HasColumnType("float")
                        .HasColumnName("KCal");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("UberFood.Core.Entities.Food", b =>
                {
                    b.HasBaseType("UberFood.Core.Entities.Product");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit")
                        .HasColumnName("IsVegetarian");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("UberFood.Core.Entities.Burger", b =>
                {
                    b.HasBaseType("UberFood.Core.Entities.Food");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            ProductId = 4,
                            Name = "Big Mac",
                            Price = 9.0999999999999996,
                            IsVegetarian = false
                        },
                        new
                        {
                            ProductId = 5,
                            Name = "Smash Burger",
                            Price = 12.1,
                            IsVegetarian = false
                        },
                        new
                        {
                            ProductId = 6,
                            Name = "Mac Chicken",
                            Price = 9.0999999999999996,
                            IsVegetarian = false
                        });
                });

            modelBuilder.Entity("UberFood.Core.Entities.Pasta", b =>
                {
                    b.HasBaseType("UberFood.Core.Entities.Food");

                    b.Property<double>("KCal")
                        .HasColumnType("float")
                        .HasColumnName("KCal");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.ToTable("Pastas");
                });

            modelBuilder.Entity("UberFood.Core.Entities.Pizza", b =>
                {
                    b.HasBaseType("UberFood.Core.Entities.Food");

                    b.Property<int>("DoughId")
                        .HasColumnType("int");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "4 Fromages",
                            Price = 9.9900000000000002,
                            IsVegetarian = false,
                            DoughId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "Chèvre Miel",
                            Price = 10.0,
                            IsVegetarian = false,
                            DoughId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Reine",
                            Price = 8.5,
                            IsVegetarian = false,
                            DoughId = 3
                        });
                });

            modelBuilder.Entity("UberFood.Core.Entities.Drink", b =>
                {
                    b.HasOne("UberFood.Core.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("UberFood.Core.Entities.Drink", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UberFood.Core.Entities.Food", b =>
                {
                    b.HasOne("UberFood.Core.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("UberFood.Core.Entities.Food", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UberFood.Core.Entities.Burger", b =>
                {
                    b.HasOne("UberFood.Core.Entities.Food", null)
                        .WithOne()
                        .HasForeignKey("UberFood.Core.Entities.Burger", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UberFood.Core.Entities.Pasta", b =>
                {
                    b.HasOne("UberFood.Core.Entities.Food", null)
                        .WithOne()
                        .HasForeignKey("UberFood.Core.Entities.Pasta", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UberFood.Core.Entities.Pizza", b =>
                {
                    b.HasOne("UberFood.Core.Entities.Food", null)
                        .WithOne()
                        .HasForeignKey("UberFood.Core.Entities.Pizza", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
